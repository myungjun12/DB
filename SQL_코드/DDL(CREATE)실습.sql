/***** CREATE TABLE 실습 *****/

--고객 테이블 CUSTOMER
CREATE TABLE CUSTOMER(
CUSTOMER_ID NUMBER(10,0)PRIMARY KEY, -- 기본 키
CUSTOMER_NAME VARCHAR2(100)NOT NULL, -- 널이 아님
CUSTOMER_EMAIL VARCHAR2(100)CONSTRAINT CU_E_U UNIQUE, -- (방법1)
CUSTOMER_PHONE VARCHAR2(20),CONSTRAINT CU_P_U UNIQUE(CUSTOMER_PHONE),
CUSTOMER_ADDRESS VARCHAR2(255)CONSTRAINT CU_A_U UNIQUE
);
COMMENT ON COLUMN"CUSTOMER".CUSTOMER_ID IS '고객아이디';--주석작성
COMMENT ON COLUMN"CUSTOMER".CUSTOMER_NAME IS '고객이름';
COMMENT ON COLUMN"CUSTOMER".CUSTOMER_EMAIL IS '고객이메일';
COMMENT ON COLUMN"CUSTOMER".CUSTOMER_PHONE IS '고객핸드폰번호';
COMMENT ON COLUMN"CUSTOMER".CUSTOMER_ADDRESS IS '고객주소';

/*
01780. 00000 -  "string literal required" 
큰 따옴표 같은 경우 대소문자를 구분하는 명칭이 적혀있기 때문에 에러가 발생할 수 있음
*/
commit;

--PRODUCT 테이블 생성
--PRODUCT_ID NUMBER(10,0)기본키
--PRODUCT_NAME VARCHAR(100)NULL 사용 불가
--PRODUCT_PRICE NUMBER(소수점 2번째 자리까지 허용)NULL 사용 불가
--PRODUCT_DESC VARCHAR(200)--중복 안되는 특별한 값 설정
CREATE TABLE PRODUCT(
    PRODUCT_ID NUMBER(10,0)CONSTRAINT P_I_P PRIMARY KEY,
    PRODUCT_NAME VARCHAR(100)NULL,
    PRODUCT_PRICE NUMBER(10,2)NULL,
    PRODUCT_DESC VARCHAR(200)CONSTRAINT P_D_U UNIQUE );
COMMIT;
--PRODUCT 값 추가 
--아메리카노 3000 신선한 원두로 만든 아메리카노
--카페라떼 2500 부드러운 우유가 들어간 라떼
--카푸치노 3500 진한 커피와 거품이 어우러진 카푸치노
--카라멜마끼아또 4000 달콤한 카라멜 시럽이 들어간 마끼아또
INSERT INTO PRODUCT 
VALUES (1,'아메리카노',3000,'신선한 원두로 만든 아메리카노');
INSERT INTO PRODUCT 
VALUES (2,'카페라떼',2500,'부드러운 우유가 들어간 라떼');
INSERT INTO PRODUCT 
VALUES (4,'카푸치노',3500,'진한 커피와 거품이 어우러진 카푸치노');
INSERT INTO PRODUCT 
VALUES (3,'카라멜마끼아또',4000,'달콤한 카라멜 시럽이 들어간 마끼아또');

COMMIT;

-- FOOD_COMPANY TABLE 생성
CREATE TABLE FOODCOMPANY(
    COMPANY_ID      NUMBER(10,0)PRIMARY KEY,--회사ID/기본키
    COMPANY_NAME    VARCHAR2(100)NOT NULL,  --회사이름/NULL불가
    COMPANY_ADDRESS VARCHAR2(255),          --회사주소
    COMPANY_PHONE   VARCHAR2(20)            --회사 전화번호
);
-->Table FOODCOMPANY이(가) 생성되었습니다.
-- SNACK 테이블 생성
CREATE TABLE SNACK (
    SNACK_ID NUMBER(10,0)PRIMARY KEY, --과자ID(기본키)
    SNACK_NAME VARCHAR2(100)NOT NULL, --과자이름(NULL 불가)
    PRICE NUMBER(10,2)NOT NULL, --과자가격(NULL 불가)
    COMPANY_ID NUMBER(10,0), --> 핵심 포인트
--FOOD_COMPANY이 회사 ID ON DELETE CASCADE -- 부모 삭제시 자식까지 삭제해줘
    CONSTRAINT FK_COMPANY FOREIGN KEY(COMPANY_ID)
    REFERENCES FOOD_COMPANY(COMPANY_ID)
    ON DELETE CASCADE 
);


CREATE TABLE SNACK1 (
    SNACK_ID NUMBER(10,0)PRIMARY KEY, --과자ID(기본키)
    SNACK_NAME VARCHAR2(100)NOT NULL, --과자이름(NULL 불가)
    PRICE NUMBER(10,2)NOT NULL, --과자가격(NULL 불가)
    CCCCCCCCC NUMBER(10,0), --> 핵심 포인트
--FOOD_COMPANY이 회사 ID ON DELETE CASCADE -- 부모 삭제시 자식까지 삭제해줘
    CONSTRAINT FK_COMPANY1 FOREIGN KEY(CCCCCCCCC)
    REFERENCES FOOD_COMPANY(COMPANY_ID)
    ON DELETE CASCADE 
);

CREATE TABLE SNACK2 (
    SNACK_ID NUMBER(10,0)PRIMARY KEY, --과자ID(기본키)
    SNACK_NAME VARCHAR2(100)NOT NULL, --과자이름(NULL 불가)
    PRICE NUMBER(10,2)NOT NULL, --과자가격(NULL 불가)
    AAAAAAA NUMBER(10,0), --> 핵심 포인트
--FOOD_COMPANY이 회사 ID ON DELETE CASCADE -- 부모 삭제시 자식까지 삭제해줘
    CONSTRAINT FK_COMPANY2 FOREIGN KEY(AAAAAAA)
    REFERENCES FOOD_COMPANY(COMPANY_ID)
    ON DELETE CASCADE 
);

CREATE TABLE SNACK3 (
    SNACK_ID NUMBER(10,0)PRIMARY KEY, --과자ID(기본키)
    SNACK_NAME VARCHAR2(100)NOT NULL, --과자이름(NULL 불가)
    PRICE NUMBER(10,2)NOT NULL, --과자가격(NULL 불가)
    EEEEEEE NUMBER(10,0), --> 핵심 포인트
--FOOD_COMPANY이 회사 ID ON DELETE CASCADE -- 부모 삭제시 자식까지 삭제해줘
    CONSTRAINT FK_COMPANY3 FOREIGN KEY(EEEEEEE)
    REFERENCES FOOD_COMPANY(COMPANY_ID)
    ON DELETE CASCADE 
);
-->ABCDEF FOREIGN KEY 키를 참조할 변수명 
--->참조할 변수명 FK_COMPANY3 규칙명 작성해주는데 규칙명은 모든 테이블 합쳐서 동일한 이름을 쓸 수 없음





















